# Generated from src/patito/Patito.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,227,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,4,0,75,8,0,11,0,12,0,76,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,
        25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,5,30,177,8,
        30,10,30,12,30,180,9,30,1,31,1,31,1,31,5,31,185,8,31,10,31,12,31,
        188,9,31,3,31,190,8,31,1,32,4,32,193,8,32,11,32,12,32,194,1,32,1,
        32,4,32,199,8,32,11,32,12,32,200,1,32,3,32,204,8,32,1,33,1,33,1,
        33,5,33,209,8,33,10,33,12,33,212,9,33,1,33,1,33,1,34,1,34,3,34,218,
        8,34,1,34,4,34,221,8,34,11,34,12,34,222,1,35,1,35,1,35,0,0,36,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,0,71,
        0,1,0,8,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,34,34,92,92,2,0,69,69,101,
        101,2,0,43,43,45,45,235,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,1,74,1,0,0,0,3,80,1,0,0,0,5,88,1,0,0,0,7,93,1,0,0,0,9,97,
        1,0,0,0,11,100,1,0,0,0,13,105,1,0,0,0,15,111,1,0,0,0,17,114,1,0,
        0,0,19,120,1,0,0,0,21,124,1,0,0,0,23,129,1,0,0,0,25,133,1,0,0,0,
        27,139,1,0,0,0,29,141,1,0,0,0,31,143,1,0,0,0,33,145,1,0,0,0,35,147,
        1,0,0,0,37,149,1,0,0,0,39,152,1,0,0,0,41,154,1,0,0,0,43,156,1,0,
        0,0,45,158,1,0,0,0,47,160,1,0,0,0,49,162,1,0,0,0,51,164,1,0,0,0,
        53,166,1,0,0,0,55,168,1,0,0,0,57,170,1,0,0,0,59,172,1,0,0,0,61,174,
        1,0,0,0,63,189,1,0,0,0,65,192,1,0,0,0,67,205,1,0,0,0,69,215,1,0,
        0,0,71,224,1,0,0,0,73,75,7,0,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,
        74,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,6,0,0,0,79,2,1,0,0,
        0,80,81,5,112,0,0,81,82,5,114,0,0,82,83,5,111,0,0,83,84,5,103,0,
        0,84,85,5,114,0,0,85,86,5,97,0,0,86,87,5,109,0,0,87,4,1,0,0,0,88,
        89,5,109,0,0,89,90,5,97,0,0,90,91,5,105,0,0,91,92,5,110,0,0,92,6,
        1,0,0,0,93,94,5,101,0,0,94,95,5,110,0,0,95,96,5,100,0,0,96,8,1,0,
        0,0,97,98,5,105,0,0,98,99,5,102,0,0,99,10,1,0,0,0,100,101,5,101,
        0,0,101,102,5,108,0,0,102,103,5,115,0,0,103,104,5,101,0,0,104,12,
        1,0,0,0,105,106,5,119,0,0,106,107,5,104,0,0,107,108,5,105,0,0,108,
        109,5,108,0,0,109,110,5,101,0,0,110,14,1,0,0,0,111,112,5,100,0,0,
        112,113,5,111,0,0,113,16,1,0,0,0,114,115,5,112,0,0,115,116,5,114,
        0,0,116,117,5,105,0,0,117,118,5,110,0,0,118,119,5,116,0,0,119,18,
        1,0,0,0,120,121,5,118,0,0,121,122,5,97,0,0,122,123,5,114,0,0,123,
        20,1,0,0,0,124,125,5,118,0,0,125,126,5,111,0,0,126,127,5,105,0,0,
        127,128,5,100,0,0,128,22,1,0,0,0,129,130,5,105,0,0,130,131,5,110,
        0,0,131,132,5,116,0,0,132,24,1,0,0,0,133,134,5,102,0,0,134,135,5,
        108,0,0,135,136,5,111,0,0,136,137,5,97,0,0,137,138,5,116,0,0,138,
        26,1,0,0,0,139,140,5,61,0,0,140,28,1,0,0,0,141,142,5,43,0,0,142,
        30,1,0,0,0,143,144,5,45,0,0,144,32,1,0,0,0,145,146,5,42,0,0,146,
        34,1,0,0,0,147,148,5,47,0,0,148,36,1,0,0,0,149,150,5,33,0,0,150,
        151,5,61,0,0,151,38,1,0,0,0,152,153,5,60,0,0,153,40,1,0,0,0,154,
        155,5,62,0,0,155,42,1,0,0,0,156,157,5,44,0,0,157,44,1,0,0,0,158,
        159,5,58,0,0,159,46,1,0,0,0,160,161,5,59,0,0,161,48,1,0,0,0,162,
        163,5,40,0,0,163,50,1,0,0,0,164,165,5,41,0,0,165,52,1,0,0,0,166,
        167,5,123,0,0,167,54,1,0,0,0,168,169,5,125,0,0,169,56,1,0,0,0,170,
        171,5,91,0,0,171,58,1,0,0,0,172,173,5,93,0,0,173,60,1,0,0,0,174,
        178,7,1,0,0,175,177,7,2,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,
        176,1,0,0,0,178,179,1,0,0,0,179,62,1,0,0,0,180,178,1,0,0,0,181,190,
        5,48,0,0,182,186,7,3,0,0,183,185,7,4,0,0,184,183,1,0,0,0,185,188,
        1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,190,1,0,0,0,188,186,
        1,0,0,0,189,181,1,0,0,0,189,182,1,0,0,0,190,64,1,0,0,0,191,193,7,
        4,0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,
        0,0,0,195,196,1,0,0,0,196,198,5,46,0,0,197,199,7,4,0,0,198,197,1,
        0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,203,1,
        0,0,0,202,204,3,69,34,0,203,202,1,0,0,0,203,204,1,0,0,0,204,66,1,
        0,0,0,205,210,5,34,0,0,206,209,3,71,35,0,207,209,8,5,0,0,208,206,
        1,0,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,
        1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,34,0,0,214,68,
        1,0,0,0,215,217,7,6,0,0,216,218,7,7,0,0,217,216,1,0,0,0,217,218,
        1,0,0,0,218,220,1,0,0,0,219,221,7,4,0,0,220,219,1,0,0,0,221,222,
        1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,70,1,0,0,0,224,225,5,
        92,0,0,225,226,9,0,0,0,226,72,1,0,0,0,12,0,76,178,186,189,194,200,
        203,208,210,217,222,1,6,0,0
    ]

class PatitoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    PROGRAM = 2
    MAIN = 3
    END = 4
    IF = 5
    ELSE = 6
    WHILE = 7
    DO = 8
    PRINT = 9
    VAR = 10
    VOID = 11
    INT_TYPE = 12
    FLOAT_TYPE = 13
    ASSIGN = 14
    PLUS = 15
    MINUS = 16
    MUL = 17
    DIV = 18
    NEQ = 19
    LT = 20
    GT = 21
    COMMA = 22
    COLON = 23
    SEMI = 24
    LP = 25
    RP = 26
    LB = 27
    RB = 28
    LBR = 29
    RBR = 30
    ID = 31
    INT_LIT = 32
    FLOAT_LIT = 33
    STRING_LIT = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'main'", "'end'", "'if'", "'else'", "'while'", 
            "'do'", "'print'", "'var'", "'void'", "'int'", "'float'", "'='", 
            "'+'", "'-'", "'*'", "'/'", "'!='", "'<'", "'>'", "','", "':'", 
            "';'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "PROGRAM", "MAIN", "END", "IF", "ELSE", "WHILE", "DO", 
            "PRINT", "VAR", "VOID", "INT_TYPE", "FLOAT_TYPE", "ASSIGN", 
            "PLUS", "MINUS", "MUL", "DIV", "NEQ", "LT", "GT", "COMMA", "COLON", 
            "SEMI", "LP", "RP", "LB", "RB", "LBR", "RBR", "ID", "INT_LIT", 
            "FLOAT_LIT", "STRING_LIT" ]

    ruleNames = [ "WS", "PROGRAM", "MAIN", "END", "IF", "ELSE", "WHILE", 
                  "DO", "PRINT", "VAR", "VOID", "INT_TYPE", "FLOAT_TYPE", 
                  "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "NEQ", "LT", 
                  "GT", "COMMA", "COLON", "SEMI", "LP", "RP", "LB", "RB", 
                  "LBR", "RBR", "ID", "INT_LIT", "FLOAT_LIT", "STRING_LIT", 
                  "EXP", "ESC" ]

    grammarFileName = "Patito.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


